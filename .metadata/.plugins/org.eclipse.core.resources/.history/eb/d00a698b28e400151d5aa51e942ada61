package com.hixapi.pmp.struts.main;

import java.sql.Connection;

import javax.naming.InitialContext;
import javax.sql.DataSource;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hixapi.framework.common.APIConstants;
import com.hixapi.framework.common.APIUtil;
import com.hixapi.framework.common.ConversionUtil;
import com.hixapi.framework.common.env.IEnvironmentProvider;
import com.hixapi.framework.service.ServiceLocator;
import com.hixapi.web.framework.struts.BaseAction;

public class DeploymentVerificationAction extends BaseAction {

	//SessionController sessionController = new SessionController();

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger log = LogManager.getLogger(DeploymentVerificationAction.class);
	private String sysDate;
	private String springVerified;
	private String dbVerified;
	private String envVerified;
	private String isimVerified;
	private String nasVerified;

	public String getSysDate() {
		return sysDate;
	}

	public void setSysDate(String myDate) {
		this.sysDate = myDate;
	}

	@Override
	protected void loadDisplayContents() throws Exception {
		IEnvironmentProvider provider = ServiceLocator.getInstance().getService(IEnvironmentProvider.class);
		springVerified = (provider != null) ? "<b><font color=\"green\">Success</font></b>"
				: "<b><font color=\"red\">Failed</font></b>";
		String env = System.getProperty("global.environment");
		envVerified = (provider != null) ? "<b><font color=\"green\">Success: " + env + "</font></b>"
				: "<b><font color=\"red\">Failed</font></b>";
		String driverVersion = "";
		InitialContext context = null;
		Connection conn = null;
		try {
			context = new InitialContext();

			conn = ((DataSource) context.lookup("jdbc/pmpdb")).getConnection();
			driverVersion = conn.getMetaData().getDriverVersion();
			dbVerified = StringUtils.isNotBlank(provider.getProperty(APIConstants.PROPKEY_AUTH_REQUIRED, String.class, "")) ? "<b><font color=\"green\">Success: Driver Version - "
					+ driverVersion + "</font></b>"
					: "<b><font color=\"red\">Failed</font></b>";

			String rootDirectory = provider.getPropertyInGroup(APIConstants.PROPGROUP_NAS,
					APIConstants.PROP_KEY_NAS_ROOT_FOLDER, String.class, "");
			boolean nasCheck = ServiceLocator.getInstance().getService(SystemAdministrationService.class)
					.verifyNASConnectivity(rootDirectory);
			nasVerified = nasCheck ? "<b><font color=\"green\">Success: " + rootDirectory + "</font></b>"
					: "<b><font color=\"red\">Failed: " + rootDirectory + "</font></b>";
		} catch (Exception ex) {
			log.error("Failed to verify data source", ex);
			dbVerified = "<b><font color=\"red\">Failed</font></b>";
		} finally {
			if (conn != null) {
				conn.close();
			}
			if (context != null) {
				context.close();
			}
		}

		sysDate = ConversionUtil.toTimestampString(APIUtil.getCurrentDate());

	}

	@Override
	protected String handleExecute() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	public String getSpringVerified() {
		return springVerified;
	}

	public void setSpringVerified(String springVerified) {
		this.springVerified = springVerified;
	}

	public String getDbVerified() {
		return dbVerified;
	}

	public void setDbVerified(String dbVerified) {
		this.dbVerified = dbVerified;
	}

	public String getEnvVerified() {
		return envVerified;
	}

	public void setEnvVerified(String envVerified) {
		this.envVerified = envVerified;
	}

	public String getIsimVerified() {
		return isimVerified;
	}

	public void setIsimVerified(String isimVerified) {
		this.isimVerified = isimVerified;
	}

	public String getNasVerified() {
		return nasVerified;
	}

	public void setNasVerified(String nasVerified) {
		this.nasVerified = nasVerified;
	}

}
