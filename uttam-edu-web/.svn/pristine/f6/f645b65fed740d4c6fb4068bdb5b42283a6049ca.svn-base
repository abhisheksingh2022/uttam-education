package com.hixapi.pmp.struts.publicdata;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hixapi.framework.service.ServiceLocator;
import com.hixapi.pmp.api.model.PlanPdfVO;
import com.hixapi.pmp.service.plan.PlanManagerService;
import com.hixapi.web.framework.struts.BaseAction;
import com.hixapi.web.framework.struts.WebUtil;

public class PlanPdfAction extends BaseAction {

	private static final Logger LOG = LogManager.getLogger(PlanPdfAction.class);

	/**
	 * 
	 */
	private static final long serialVersionUID = -7296331027656555878L;

	private String planId;
	private String language;
	private String carrier;
	private String year;

	private InputStream pdfStream;
	private int pdfFileLength;
	private String pdfFileName;

	/** Input Objects end **/

	@Override
	protected String handleExecute() throws Exception {
		LOG.entry();
		boolean paramsValid = true;
		if (StringUtils.isBlank(language)) {
			paramsValid = false;
		} else if (StringUtils.isBlank(carrier)) {
			paramsValid = false;
		} else if (StringUtils.isBlank(year)) {
			paramsValid = false;
		} else if (StringUtils.isBlank(planId)) {
			paramsValid = false;
		}
		if (!paramsValid) {
			LOG.error("Invalid Request for PDF File : {}", WebUtil.traceRequest(this));
			return NOT_FOUND;
		}
		PlanPdfVO vo = new PlanPdfVO();
		vo.setCarrierId(carrier);
		vo.setCoverageYear(year);
		String mappedLang = "en_US";
		if ("es_US".equalsIgnoreCase(this.language) || "es".equalsIgnoreCase(this.language)) {
			mappedLang = "es_US";
		}
		vo.setLanguage(mappedLang);
		vo.setVariantHiosId(planId);

		byte[] result = ServiceLocator.getInstance().getService(PlanManagerService.class).downloadFinalPlanPDF(vo);
		if (result.length != 0) {
			pdfFileLength = result.length;
			pdfStream = new ByteArrayInputStream(result);
			pdfFileName = planId + "_" + mappedLang + ".pdf";
			return "pdf-download";
		}
		return NOT_FOUND;

	}

	public String getPlanId() {
		return planId;
	}

	public void setPlanId(String planId) {
		this.planId = planId;
	}

	public String getLanguage() {
		return language;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	public String getCarrier() {
		return carrier;
	}

	public void setCarrier(String carrier) {
		this.carrier = carrier;
	}

	public String getYear() {
		return year;
	}

	public void setYear(String year) {
		this.year = year;
	}

	public InputStream getPdfStream() {
		return pdfStream;
	}

	public void setPdfStream(InputStream pdfStream) {
		this.pdfStream = pdfStream;
	}

	public int getPdfFileLength() {
		return pdfFileLength;
	}

	public void setPdfFileLength(int pdfFileLength) {
		this.pdfFileLength = pdfFileLength;
	}

	public String getPdfFileName() {
		return pdfFileName;
	}

	public void setPdfFileName(String pdfFileName) {
		this.pdfFileName = pdfFileName;
	}

	@Override
	protected void loadDisplayContents() throws Exception {
		// TODO Auto-generated method stub
		
	}

}
