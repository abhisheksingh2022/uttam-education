package com.hixapi.pmp.struts.usermgmt;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hixapi.framework.service.ServiceLocator;
import com.hixapi.pmp.api.model.APICodeConstants.AccessCheckMode;
import com.hixapi.pmp.api.model.APICodeConstants.RecordMode;
import com.hixapi.pmp.api.model.APICodeConstants.UserFunction;
import com.hixapi.pmp.api.model.CarrierUserVO;
import com.hixapi.pmp.api.model.CarrierVO;
import com.hixapi.pmp.api.model.criteria.CarrierUserSearchCriteria;
import com.hixapi.pmp.common.util.PMPAccessController;
import com.hixapi.pmp.service.carrier.CarrierService;
import com.hixapi.pmp.service.user.UserService;
import com.hixapi.web.framework.struts.BaseSecureAction;

public class CarrierUserSearchAction extends BaseSecureAction {
	
	private static final Logger LOG = LogManager.getLogger(CarrierUserSearchAction.class);

	/**
	 * 
	 */
	private static final long serialVersionUID = -7296331027656555878L;
	private static final String RESULT_CARRIERUSER_PROFILE = "carrieruser-profile";
	
	/**Display Objects **/
	private List<CarrierUserVO> carrierUserList;
	/** Display Objects end **/
	
	/** Input Objects start **/
		private Long userId;
		private boolean isSearch;
	

	private CarrierUserSearchCriteria criteria; 
	/** Input Objects end **/
	

	@Override
	protected void loadDisplayContents() throws Exception {
		LOG.entry();
		
		/*
		 */
		LOG.exit();
	}
	
	public String search(){
		LOG.entry();
		/*
		 * Search using the incoming criteria
		 */
		carrierUserList = ServiceLocator.getInstance().getService(UserService.class).searchCarrierUsers(criteria);
		//carrierUserList = new ArrayList();
		isSearch = true;
		return LOG.exit(FLASH);
	}
	/**
	 * Navigates to carrier profile screen with no parameters
	 * @return
	 * @throws Exception
	 */
	public String add()throws Exception{
		LOG.entry();
		addRedirectURLParameter(CarrierUserProfileAction.RECORD_MODE, RecordMode.ADD.getCode());
		return LOG.exit(RESULT_CARRIERUSER_PROFILE);
	}
	
	public void validate_view(){
		doValidation();
	}
	public String view()throws Exception{
		LOG.entry();
		addRedirectURLParameter(CarrierUserProfileAction.CARRIERUSER_ID, userId);
		addRedirectURLParameter(CarrierUserProfileAction.RECORD_MODE, RecordMode.VIEW.getCode());
		return LOG.exit(RESULT_CARRIERUSER_PROFILE);
	}
	
	public void validate_edit(){
		doValidation();
	}
	public String edit()throws Exception{
		LOG.entry();
		addRedirectURLParameter(CarrierUserProfileAction.CARRIERUSER_ID, userId);
		addRedirectURLParameter(CarrierUserProfileAction.RECORD_MODE, RecordMode.EDIT.getCode());
		return LOG.exit(RESULT_CARRIERUSER_PROFILE);
	}
	
	private void doValidation(){
		if(userId==null || userId <= 0){
			super.addValidationError("msg.carrieruser.selectuser", "''");
		}
	}
	@Override
	public void onValidationError(){
		carrierUserList = ServiceLocator.getInstance().getService(UserService.class).searchCarrierUsers(criteria);
		isSearch = true;
	}

	@Override
	protected String handleExecute() throws Exception {
		LOG.entry();
		// TODO Auto-generated method stub
		return LOG.exit(null);
	}

	public List<CarrierUserVO> getCarrierUserList() {
		return carrierUserList;
	}

	public void setCarrierUserList(List<CarrierUserVO> carrierUserList) {
		this.carrierUserList = carrierUserList;
	}

	public CarrierUserSearchCriteria getCriteria() {
		return criteria;
	}

	public void setCriteria(CarrierUserSearchCriteria criteria) {
		this.criteria = criteria;
	}

	public List<CarrierVO>  getCarrierList(){
		List<CarrierVO> carrierList  = ServiceLocator.getInstance().getService(CarrierService.class).searchCarriers(null);
		return carrierList;
	}

	public Long getUserId() {
		return userId;
	}

	public void setUserId(Long userId) {
		this.userId = userId;
	}

	public boolean getIsSearch() {
		return isSearch;
	}

	public void setIsSearch(boolean isSearch) {
		this.isSearch = isSearch;
	}
	
	public boolean isEditAccess() {
		if (PMPAccessController.getInstance().isAllowedForCurrentUser(AccessCheckMode.USER_ACTION,
				UserFunction.CARRIERUSER_EDIT.getCode())) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isAddAccess() {
		if (PMPAccessController.getInstance().isAllowedForCurrentUser(AccessCheckMode.USER_ACTION,
				UserFunction.CARRIERUSER_ADD.getCode())) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isViewAccess() {
		if (PMPAccessController.getInstance().isAllowedForCurrentUser(AccessCheckMode.USER_ACTION,
				UserFunction.CARRIERUSER_VIEW.getCode())) {
			return true;
		} else {
			return false;
		}
	}

}
