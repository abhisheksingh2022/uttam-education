package com.hixapi.pmp.struts.main;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.Cookie;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.struts2.ServletActionContext;

import com.hixapi.framework.common.APIConstants;
import com.hixapi.framework.common.EncryptionUtil;
import com.hixapi.framework.common.env.IEnvironmentProvider;
import com.hixapi.framework.common.model.UserMessage;
import com.hixapi.framework.service.ServiceLocator;
import com.hixapi.pmp.api.model.APICodeConstants.UserActivationStatus;
import com.hixapi.pmp.api.model.RoleVO;
import com.hixapi.pmp.api.model.UserVO;
import com.hixapi.pmp.service.user.UserService;
import com.hixapi.web.framework.struts.BaseAction;
import com.hixapi.web.framework.struts.SecurityInterceptor;
import com.hixapi.web.framework.struts.SessionController;

public class LoginAction extends BaseAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7296331027656555878L;

	private static final Logger _log = LogManager.getLogger(LoginAction.class);

	private String userId;
	private List<String> roles;
	
	private List<RoleVO> availableRoles = new ArrayList<RoleVO>();

	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	
	@Override
	protected void loadDisplayContents() throws Exception {
		_log.entry();
		final IEnvironmentProvider environment = ServiceLocator.getInstance().getService(IEnvironmentProvider.class);
		if (!environment.isProduction() && !environment.getProperty(APIConstants.PROPKEY_AUTH_REQUIRED, Boolean.class, true)) {
			availableRoles = ServiceLocator.getInstance().getService(UserService.class).retrieveAvailableRoles();
		}
		Cookie userCookie = new Cookie(SecurityInterceptor.HTTP_WEBSEC_USERID, "");
		userCookie.setPath("/");
		userCookie.setMaxAge(0);
		Cookie roleCookie = new Cookie(SecurityInterceptor.HTTP_WEBSEC_USER_ROLES, "");
		roleCookie.setPath("/");
		roleCookie.setMaxAge(0);
		ServletActionContext.getResponse().addCookie(userCookie);
		ServletActionContext.getResponse().addCookie(roleCookie);
	}

	@Override
	protected String handleExecute() throws Exception {
		// TODO Auto-generated method stub
		_log.entry();
		final IEnvironmentProvider environment = ServiceLocator.getInstance().getService(IEnvironmentProvider.class);
		if (!environment.isProduction()
				&& !environment.getProperty(APIConstants.PROPKEY_AUTH_REQUIRED, Boolean.class, true)) {
			//Set the cookies to use by SecurityInterceptor in the case of dummy login
			String encUserId = EncryptionUtil.encrypt(userId);
			_log.debug("Login Id : {}", userId);
			UserVO user = ServiceLocator.getInstance().getService(UserService.class).retrieveUserByLoginId(userId, roles);
			if (user == null || !UserActivationStatus.ACTIVE.getCode().equals(user.getStatusCode())) {
				addBusinessMessage(new UserMessage(UserMessage.SEVERITY_ERROR, "msg.login.user_not_valid", null, null),
						"");
				return FLASH;
			}
			StringBuilder rolesList = new StringBuilder();
			for (String role : getRoles()) {
				rolesList.append(StringUtils.trimToEmpty(role)).append(",");
			}
			rolesList.setLength(rolesList.length() - 1); // trim last comma

			_log.debug("Roles : {}", rolesList.toString());
			String encRoles = EncryptionUtil.encrypt(rolesList.toString());
			Cookie userCookie = new Cookie(SecurityInterceptor.HTTP_WEBSEC_USERID, encUserId);
			userCookie.setPath("/");
			userCookie.setMaxAge(-1);
			Cookie roleCookie = new Cookie(SecurityInterceptor.HTTP_WEBSEC_USER_ROLES, encRoles);
			roleCookie.setPath("/");
			roleCookie.setMaxAge(-1);
			ServletActionContext.getResponse().addCookie(userCookie);
			ServletActionContext.getResponse().addCookie(roleCookie);
		}
		_log.exit();
		return NEXT;
	}

	public void validate_execute() {
		if (StringUtils.isEmpty(userId)) {
			super.addValidationError("msg.login.user_id_required", "userId");
		}
		if(CollectionUtils.isEmpty(roles)){
			super.addValidationError("msg.login.roles_required", "roles");
		}

	}

	@Override
	public void onValidationError() {
		this.availableRoles = ServiceLocator.getInstance().getService(UserService.class).retrieveAvailableRoles();
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public List<String> getRoles() {
		return roles;
	}

	public void setRoles(List<String> roles) {
		this.roles = roles;
	}

	public List<RoleVO> getAvailableRoles() {
		return availableRoles;
	}

	public void setAvailableRoles(List<RoleVO> availableRoles) {
		this.availableRoles = availableRoles;
	}

}
