package com.hixapi.pmp.common.util.xml;


import gov.hhs.cms.ffe.pbt.vo.PlanBenefitTemplateVO;
import gov.hhs.cms.ffe.rates.vo.QhpApplicationRateGroupVO;
import gov.hhs.cms.ffe.rx.vo.PrescriptionDrugTemplateVO;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.ValidationEventHandler;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.Source;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hixapi.framework.common.FileUtil;
import com.hixapi.framework.common.exception.ConfigurationException;
import com.hixapi.pm.admin_data.extension.v1_0.PayloadType;

/**
 * The Class JAXBUtil provides the JAXB contexts as static references so that the contexts are not created on each usage.
 * 
 * JAXB Context has two representations, one in normal usage and one in the context of history records.
 * 
 * This class also provides utility methods for marshalling/unmarshalling JAXB compliant beans/xml using the previously
 * mentioned contexts. This provides a transparent JAXB usage to all the applications utilizing the jaxb contexts provided in
 * the class.
 */
public class JAXBUtil {

	@SuppressWarnings("rawtypes")
	private static Map<Class, JAXBContext> contextMap = new HashMap<Class, JAXBContext>();

	//private static SchemaFactory schemaFactory;

	/** The Constant log. */
	private static final Logger log = LogManager.getLogger(JAXBUtil.class);

	static {
		setContext();
	}

	// public static Unmarshaller getUnmarshaller() throws Exception {
	// return pbtUnmarshaller;
	// }

	/**
	 * Sets the context.
	 */
	private static void setContext() {
		try {
			JAXBContext pbtContext = JAXBContext.newInstance(getContextStr(new String[] {
			"gov.hhs.cms.base.vo",
			"gov.hhs.cms.ffe.pbt.vo"}));
			contextMap.put(PlanBenefitTemplateVO.class, pbtContext);
			
			
			
			JAXBContext ratesContext = JAXBContext.newInstance(getContextStr(new String[] {
			"gov.hhs.cms.base.vo",
			"gov.hhs.cms.ffe.rates.vo"}));
			contextMap.put(QhpApplicationRateGroupVO.class, ratesContext);
			
			JAXBContext rxContext = JAXBContext.newInstance(getContextStr(new String[] {
			"gov.hhs.cms.base.vo",
			"gov.hhs.cms.ffe.rx.vo"}));
			contextMap.put(PrescriptionDrugTemplateVO.class, rxContext);
			
			JAXBContext adminContext = JAXBContext.newInstance(getContextStr(new String[] {
			"com.hixapi.pm.admin_data.exchange.v1_0",
			"com.hixapi.pm.admin_data.extension.v1_0",
			"com.hixapi.pm.admin_data.gov.cms.hix.core",
			"com.hixapi.pm.admin_data.gov.cms.hix.pm",
			"com.hixapi.pm.admin_data.gov.niem.appinfo.v2_0",
			"com.hixapi.pm.admin_data.gov.niem.appinfo.v2_1",
			"com.hixapi.pm.admin_data.gov.niem.core",
			"com.hixapi.pm.admin_data.gov.niem.proxy.xsd.v2_0",
			"com.hixapi.pm.admin_data.gov.niem.structures.v2_0",
			"com.hixapi.pm.admin_data.gov.niem.usps_states.v2_0"}));
			contextMap.put(PayloadType.class, adminContext);
			
			JAXBContext networkContext = JAXBContext.newInstance(getContextStr(new String[] {
			"com.hixapi.pm.issuer_network.exchange.v1_0",
			"com.hixapi.pm.issuer_network.extension.v1_0",
			"com.hixapi.pm.issuer_network.gov.cms.hix.core",
			"com.hixapi.pm.issuer_network.gov.cms.hix.pm",
			"com.hixapi.pm.issuer_network.gov.niem.appinfo.v2_0",
			"com.hixapi.pm.issuer_network.gov.niem.appinfo.v2_1",
			"com.hixapi.pm.issuer_network.gov.niem.core",
			"com.hixapi.pm.issuer_network.gov.niem.proxy.xsd.v2_0",
			"com.hixapi.pm.issuer_network.gov.niem.structures.v2_0",
			"com.hixapi.pm.issuer_network.gov.niem.usps_states.v2_0"}));
			contextMap.put(com.hixapi.pm.issuer_network.extension.v1_0.PayloadType.class, networkContext);


		} catch (JAXBException jx) {
			log.error("Error creating jaxb context", jx);
			log.error("Linked Exception", jx.getLinkedException());
			
			throw new ConfigurationException(jx, "config", "Jaxb Error");
		}
	}

	/**
	 * Gets the JAXB context.
	 * 
	 * @return the JAXB context
	 */
	public static JAXBContext getJAXBContext(@SuppressWarnings("rawtypes") Class type) {
		return contextMap.get(type);
	}

	/**
	 * Gets the context str.
	 * 
	 * @param packageNames
	 *            the package names
	 * 
	 * @return the context str
	 */
	private static String getContextStr(String[] packageNames) {
		StringBuilder strB = new StringBuilder();
		int index = 1;
		for (String pkg : packageNames) {
			strB.append(pkg);
			if (index < +packageNames.length) {
				strB.append(":");
			}
			index++;
		}
		return strB.toString();
	}

	// private static Marshaller getValidatingMarshaller(String schemaPath)
	// throws Exception {
	//
	// Marshaller mar = pbtContext.createMarshaller();
	// mar.setSchema(schemaFactory.newSchema(FileUtil.getFileURL(schemaPath)));
	// return mar;
	// }

	/**
	 * Gets the validating pbtMarshaller.
	 * 
	 * @param schemaPaths
	 *            the schema paths
	 * 
	 * @return the validating pbtMarshaller
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("rawtypes")
	private static Marshaller getValidatingMarshaller(String[] schemaPaths, Class type) throws Exception {

		Source[] sources = new StreamSource[schemaPaths.length];
		int i = 0;
		for (String path : schemaPaths) {
			sources[i] = new StreamSource(FileUtil.locateInputStream(path));
			i++;
		}
		Marshaller mar = getContext(type).createMarshaller();
		SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		Schema schema = factory.newSchema(sources);
		mar.setSchema(schema);
		return mar;
	}

	@SuppressWarnings("rawtypes")
	private static JAXBContext getContext(Class type) {
		if(contextMap.containsKey(type)){
			return contextMap.get(type);
		}
		log.error("Context not found in map for class:{}", type);
		return null;
	}

	/**
	 * Gets the validating pbtUnmarshaller.
	 * 
	 * @param schemaPaths
	 *            the schema paths
	 * 
	 * @return the validating pbtUnmarshaller
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("rawtypes")
	private static Unmarshaller getValidatingUnmarshaller(String[] schemaPaths, Class type) throws Exception {

		Source[] sources = new StreamSource[schemaPaths.length];
		int i = 0;
		for (String path : schemaPaths) {
			sources[i] = new StreamSource(FileUtil.locateInputStream(path));
			i++;
		}
		Unmarshaller um = getContext(type).createUnmarshaller();
		SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		factory.setResourceResolver(new SchemaResolver(getSchemaBasePath(type), getSchemaBaseFolder(type)));
		um.setSchema(factory.newSchema(sources));
		return um;
	}

	/**
	 * The following methods are the synchronized thread safe methods.
	 * 
	 * @param stream
	 *            the stream
	 * 
	 * @return the object
	 * 
	 * @throws JAXBException
	 *             the JAXB exception
	 */

	@SuppressWarnings({ "unchecked" })
	public static synchronized <T> T unmarshal(InputStream stream, Class<T> type) throws JAXBException {
		long start = System.currentTimeMillis();
		T obj = (T) getContext(type).createUnmarshaller().unmarshal(stream);
		if(obj instanceof JAXBElement){
			obj = ((JAXBElement<T>)obj).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.unmarshal(InputStream)", (end - start));

		return obj;

	}
	
	/**
	 * The following methods are the synchronized thread safe methods.
	 * 
	 * @param stream
	 *            the stream
	 * 
	 * @return the object
	 * 
	 * @throws JAXBException
	 *             the JAXB exception
	 */

	@SuppressWarnings({ "unchecked" })
	public static synchronized <T> T unmarshal(SAXSource stream, Class<T> type) throws JAXBException {
		long start = System.currentTimeMillis();
		T obj = (T) getContext(type).createUnmarshaller().unmarshal(stream);
		if(obj instanceof JAXBElement){
			obj = ((JAXBElement<T>)obj).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.unmarshal(InputStream)", (end - start));

		return obj;

	}

	/**
	 * The following methods are the synchronized thread safe methods.
	 * 
	 * @param file
	 *            the stream
	 * 
	 * @return the object
	 * 
	 * @throws JAXBException
	 *             the JAXB exception
	 */

	@SuppressWarnings("unchecked")
	public static synchronized <T> T unmarshal(File file, Class<T> clazz) throws JAXBException {
		long start = System.currentTimeMillis();
		T obj = (T) getContext(clazz).createUnmarshaller().unmarshal(file);
		if(obj instanceof JAXBElement){
			obj = ((JAXBElement<T>)obj).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.unmarshal(File)", (end - start));

		return obj;

	}

	/**
	 * The following methods are the synchronized thread safe methods.
	 * 
	 * @param file
	 *            the stream
	 * 
	 * @return the object
	 * 
	 * @throws JAXBException
	 *             the JAXB exception
	 */

	public static synchronized <T> T unmarshal(XMLStreamReader reader, Class<T> clazz) throws JAXBException {
		long start = System.currentTimeMillis();
		JAXBElement<T> jaxbElement = getContext(clazz).createUnmarshaller().unmarshal(reader, clazz);
		T obj = jaxbElement.getValue();
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.unmarshal(File)", (end - start));

		return obj;

	}

	/**
	 * Unmarshal.
	 * 
	 * @param xml
	 *            the xml
	 * 
	 * @return the object
	 * 
	 * @throws JAXBException
	 *             the JAXB exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T unmarshal(String xml, Class<T> clazz) throws JAXBException {
		long start = System.currentTimeMillis();
		ByteArrayInputStream stream = new ByteArrayInputStream(xml.getBytes());

		T obj = (T) getContext(clazz).createUnmarshaller().unmarshal(stream);
		if(obj instanceof JAXBElement){
			obj = ((JAXBElement<T>)obj).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.unmarshal(String)", (end - start));

		return obj;

	}

	/**
	 * Validating unmarshal.
	 * 
	 * @param stream
	 *            the stream
	 * @param schemaPaths
	 *            the schema paths
	 * 
	 * @return the object
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(InputStream stream, String[] schemaPaths, Class<T> clazz)
			throws Exception {
		long start = System.currentTimeMillis();
		Unmarshaller um = getValidatingUnmarshaller(schemaPaths, clazz);
		T obj = (T) um.unmarshal(stream);
		if(obj instanceof JAXBElement){
			obj = ((JAXBElement<T>)obj).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.validatingUnmarshal(InputStream, String[])",
				(end - start));

		return obj;

	}
	
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(XMLStreamReader stream, ValidationEventHandler handler, Class<T> clazz)
			throws Exception {
		long start = System.currentTimeMillis();
		Unmarshaller um = getValidatingUnmarshaller(getSchemaPath(clazz), clazz);
		um.setEventHandler(handler);
		T obj = (T) um.unmarshal(stream);
		if(obj instanceof JAXBElement){
			obj = ((JAXBElement<T>)obj).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + obj.getClass().getName(), "JAXBUtil.validatingUnmarshal(InputStream, String[])",
				(end - start));

		return obj;

	}

	/**
	 * Validating unmarshal.
	 * 
	 * @param stream
	 *            the stream
	 * @param schemaPaths
	 *            the schema paths
	 * 
	 * @return the object
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(SAXSource stream, ValidationEventHandler handler, Class<T> clazz)
			throws Exception {
		long start = System.currentTimeMillis();
		Unmarshaller um = getValidatingUnmarshaller(getSchemaPath(clazz), clazz);
		um.setEventHandler(handler);
		T unmarshalled = (T) um.unmarshal(stream);
		if(unmarshalled instanceof JAXBElement){
			unmarshalled = ((JAXBElement<T>)unmarshalled).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + unmarshalled.getClass().getName(), "JAXBUtil.validatingUnmarshal(SAXSource, String[])",
				(end - start));

		return unmarshalled;

	}

	@SuppressWarnings("rawtypes")
	private static String getSchemaBasePath(Class clazz) {
		if (clazz == PayloadType.class) {
			return  "/xsd/serff/Admin_Data_IEPD_v1.2.1";
					
		} else if (clazz == com.hixapi.pm.issuer_network.extension.v1_0.PayloadType.class) {
			return "/xsd/serff/Network_Provider_IEPD_v1.1.2";
		} else if (clazz == QhpApplicationRateGroupVO.class) {
			return "/xsd/serff/PBT/xsd/gov/hhs/cms/ffe";
		} else if (clazz == PlanBenefitTemplateVO.class) {
			return "/xsd/serff/PBT/xsd/gov/hhs/cms/ffe";
		}else if (clazz == PrescriptionDrugTemplateVO.class) {
			return "/xsd/serff/PBT/xsd/gov/hhs/cms/ffe";
		}
		return "";
	}
	@SuppressWarnings("rawtypes")
	private static String getSchemaBaseFolder(Class clazz) {
		if (clazz == PayloadType.class) {
			return  "XMLschemas";
					
		} else if (clazz == com.hixapi.pm.issuer_network.extension.v1_0.PayloadType.class) {
			return  "XMLschemas";
		} else if (clazz == QhpApplicationRateGroupVO.class) {
			return "";
		} else if (clazz == PlanBenefitTemplateVO.class) {
			return "vo";
		}else if (clazz == PrescriptionDrugTemplateVO.class) {
			return "vo";
		}
		return "";
	}

	@SuppressWarnings("rawtypes")
	private static String[] getSchemaPath(Class clazz) {
		if (clazz == PayloadType.class) {
			return new String[] { "/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/exchange/ExchangeModel.xsd"
					/*,
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/niem/niem-core.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/niem/domains/hix/0.1/hix-core/hix-core.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/niem/domains/hix/0.1/hix-pm/hix-pm.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/subset/niem/appinfo/2.0/appinfo.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/subset/niem/appinfo/2.1/appinfo.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/subset/niem/structures/2.0/structures.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/subset/niem/structures/2.0/structures.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/subset/niem/proxy/xsd/2.0/xsd.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/niem/usps_states/2.0/usps_states.xsd",
					"/xsd/serff/Admin_Data_IEPD_v1.2.1/XMLschemas/subset/niem/proxy/xsd/2.0/xsd.xsd"*/
			
			};
		} else if (clazz == com.hixapi.pm.issuer_network.extension.v1_0.PayloadType.class) {
			return new String[] { "/xsd/serff/Network_Provider_IEPD_v1.1.2/XMLschemas/exchange/ExchangeModel.xsd" };
		} else if (clazz == QhpApplicationRateGroupVO.class) {
			return new String[] { "/xsd/serff/PBT/xsd/gov/hhs/cms/ffe/vo/QhpApplicationRateGroupVO.xsd" };
		} else if (clazz == PlanBenefitTemplateVO.class) {
			return new String[] { "/xsd/serff/PBT/xsd/gov/hhs/cms/ffe/vo/PlanBenefitTemplateVO.xsd" };
		}else if (clazz == PrescriptionDrugTemplateVO.class) {
			return new String[] { "/xsd/serff/PBT/xsd/gov/hhs/cms/ffe/vo/PrescriptionDrugTemplateVO.xsd" };
		}
		return new String[0];
	}

	/**
	 * Validating unmarshal.
	 * 
	 * @param xml
	 *            the xml
	 * @param schemaPaths
	 *            the schema paths
	 * 
	 * @return the object
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(String xml, String[] schemaPaths, Class<T> clazz) throws Exception {
		long start = System.currentTimeMillis();
		ByteArrayInputStream stream = new ByteArrayInputStream(xml.getBytes());
		Unmarshaller um = getValidatingUnmarshaller(schemaPaths, clazz);
		T unmarshalled = (T) um.unmarshal(stream);
		if(unmarshalled instanceof JAXBElement){
			unmarshalled = ((JAXBElement<T>)unmarshalled).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + unmarshalled.getClass().getName(), "JAXBUtil.validatingUnmarshal(String, String[])",
				(end - start));

		return unmarshalled;

	}

	/**
	 * Validating unmarshal.
	 * 
	 * @param stream
	 *            the stream
	 * @param schemaPaths
	 *            the schema paths
	 * @param handler
	 *            the handler
	 * 
	 * @return the object
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(InputStream stream, String[] schemaPaths,
			ValidationEventHandler handler, Class<T> clazz) throws Exception {
		long start = System.currentTimeMillis();
		Unmarshaller um = getValidatingUnmarshaller(schemaPaths, clazz);
		um.setEventHandler(handler);
		T unmarshalled = (T) um.unmarshal(stream);
		if(unmarshalled instanceof JAXBElement){
			unmarshalled = ((JAXBElement<T>)unmarshalled).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + unmarshalled.getClass().getName(), "JAXBUtil.validatingUnmarshal(InputStream, String[])",
				(end - start));

		return unmarshalled;

	}

	/**
	 * Validating unmarshal.
	 * 
	 * @param stream
	 *            the stream
	 * @param schemaPaths
	 *            the schema paths
	 * @param handler
	 *            the handler
	 * 
	 * @return the object
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(File file, String[] schemaPaths, ValidationEventHandler handler,
			Class<T> clazz) throws Exception {
		long start = System.currentTimeMillis();
		Unmarshaller um = getValidatingUnmarshaller(schemaPaths, clazz);
		um.setEventHandler(handler);
		T unmarshalled = (T) um.unmarshal(file);
		if(unmarshalled instanceof JAXBElement){
			unmarshalled = ((JAXBElement<T>)unmarshalled).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + unmarshalled.getClass().getName(), "JAXBUtil.validatingUnmarshal(InputStream, String[])",
				(end - start));

		return unmarshalled;

	}

	/**
	 * Validating unmarshal.
	 * 
	 * @param xml
	 *            the xml
	 * @param schemaPaths
	 *            the schema paths
	 * @param handler
	 *            the handler
	 * 
	 * @return the object
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("unchecked")
	public static synchronized <T> T validatingUnmarshal(String xml, String[] schemaPaths, ValidationEventHandler handler,
			Class<T> clazz) throws Exception {
		long start = System.currentTimeMillis();
		ByteArrayInputStream stream = new ByteArrayInputStream(xml.getBytes());
		Unmarshaller um = getValidatingUnmarshaller(schemaPaths, clazz);
		um.setEventHandler(handler);
		T unmarshalled = (T) um.unmarshal(stream);
		if(unmarshalled instanceof JAXBElement){
			unmarshalled = ((JAXBElement<T>)unmarshalled).getValue();
					
		}
		long end = System.currentTimeMillis();

		log.debug("Unmarshal - " + unmarshalled.getClass().getName(), "JAXBUtil.validatingUnmarshal(String, String[])",
				(end - start));

		return unmarshalled;

	}

//	/**
//	 * Marshal without xml declaration.
//	 * 
//	 * @param obj
//	 *            the obj
//	 * @param stream
//	 *            the stream
//	 * 
//	 * @throws JAXBException
//	 *             the JAXB exception
//	 */
//	public static synchronized void marshalWithoutXMLDeclaration(Object obj, OutputStream stream) throws JAXBException {
//		long start = System.currentTimeMillis();
//		pbtFragmentMarshaller.marshal(obj, stream);
//
//		long end = System.currentTimeMillis();
//
//		log.debug("Marshal - " + obj.getClass().getName(), "JAXBUtil.marshalWithoutXMLDeclaration(Object,OutputStream)",
//				(end - start));
//
//	}

	/**
	 * Marshal without xml declaration.
	 * 
	 * @param obj
	 *            the obj
	 * @param stream
	 *            the stream
	 * 
	 * @throws JAXBException
	 *             the JAXB exception
	 */
	@SuppressWarnings("rawtypes")
	public static synchronized void marshal(Object obj, OutputStream stream, Class type) throws JAXBException {
		long start = System.currentTimeMillis();
		getContext(type).createMarshaller().marshal(obj, stream);

		long end = System.currentTimeMillis();

		log.debug("Marshal - " + obj.getClass().getName(), "JAXBUtil.marshal(Object,OutputStream)", (end - start));

	}

	/**
	 * Validating marshal.
	 * 
	 * @param obj
	 *            the obj
	 * @param stream
	 *            the stream
	 * @param schemaPaths
	 *            the schema paths
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("rawtypes")
	public static synchronized void validatingMarshal(Object obj, OutputStream stream, String[] schemaPaths, Class type)
			throws Exception {
		long start = System.currentTimeMillis();
		Marshaller marshaller = getValidatingMarshaller(schemaPaths, type);
		marshaller.marshal(obj, stream);

		long end = System.currentTimeMillis();

		log.debug("Marshal - " + obj.getClass().getName(), "JAXBUtil.validatingMarshal(Object,OutputStream,String[])",
				(end - start));

	}

	//    public static synchronized void validatingMarshal(Object obj, StringWriter writer, String[] schemaPaths)
	//	    throws Exception {
	//	Marshaller pbtMarshaller = getValidatingMarshaller(schemaPaths);
	//	pbtMarshaller.marshal(obj, writer);
	//    }

	/**
	 * Validating marshal.
	 * 
	 * @param obj
	 *            the obj
	 * @param stream
	 *            the stream
	 * @param schemaPaths
	 *            the schema paths
	 * @param handler
	 *            the handler
	 * 
	 * @throws Exception
	 *             the exception
	 */
	@SuppressWarnings("rawtypes")
	public static synchronized void validatingMarshal(Object obj, OutputStream stream, String[] schemaPaths,
			ValidationEventHandler handler, Class clazz) throws Exception {
		long start = System.currentTimeMillis();
		Marshaller marshaller = getValidatingMarshaller(schemaPaths, clazz);
		marshaller.setEventHandler(handler);
		marshaller.marshal(obj, stream);

		long end = System.currentTimeMillis();

		log.debug("Marshal - " + obj.getClass().getName(),
				"JAXBUtil.validatingMarshal(Object,OutputStream,String[],ValidationEventHandler)", (end - start));

	}

}
