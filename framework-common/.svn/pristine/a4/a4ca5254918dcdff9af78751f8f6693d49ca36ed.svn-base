package com.hixapi.pmp.common.util.xml;

import java.io.File;
import java.io.InputStream;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.ls.LSInput;
import org.w3c.dom.ls.LSResourceResolver;

/**
 * The Class SchemaResolver.
 */
public class SchemaResolver implements LSResourceResolver {

	private static final String FILE_PATH_SEPARATOR = "/";

	/** The logger. */
	private static final Logger logger = LogManager.getLogger(SchemaResolver.class);

	/** The schema base path. */
	private final String schemaBasePath;

	private String baseFolderName;

	/**
	 * Instantiates a new resource resolver.
	 *
	 * @param schemaBasePath
	 *            the schema base path
	 */
	public SchemaResolver(String schemaBasePath, String baseFolderName) {
		this.schemaBasePath = schemaBasePath;
		this.baseFolderName = baseFolderName;
	}

	/* (non-Javadoc)
	 * @see org.w3c.dom.ls.LSResourceResolver#resolveResource(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public LSInput resolveResource(String type, String namespaceURI, String publicId, String systemId, String baseURI) {
		// The base resource that includes this current resource

		// Read the resource as input stream
		String normalizedPath = getNormalizedPath(schemaBasePath, systemId);
		InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(normalizedPath);

		return new LSInputImpl(publicId, systemId, resourceAsStream);

	}

	/**
	 * Gets the normalized path.
	 *
	 * @param basePath
	 *            the base path
	 * @param relativePath
	 *            the relative path
	 * @return the normalized path
	 */
	private String getNormalizedPath(String basePath, String relativePath) {
		int index = relativePath.indexOf(baseFolderName);
		String path = null;
		if (index != -1) {

			path = schemaBasePath + FILE_PATH_SEPARATOR + relativePath.substring(index);
			logger.debug("Schema path determined as {}", path);
		} else {
			logger.debug("Base Folder name {} not found in schema path {}, returning default", baseFolderName, relativePath);
			path = schemaBasePath + FILE_PATH_SEPARATOR + baseFolderName + FILE_PATH_SEPARATOR + relativePath;
		}
		logger.debug("Schema path determined as {}", path);
		return path;
	}
}
